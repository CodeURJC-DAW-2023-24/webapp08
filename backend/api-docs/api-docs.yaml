openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8443
  description: Generated server url
paths:
  /api/persons/friends/requests/{requestId}:
    put:
      tags:
      - rest-person-controller
      summary: Response request
      operationId: processRequest
      parameters:
      - name: requestId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: accepted
        in: query
        required: true
        schema:
          type: boolean
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: The person dosen´t exit
        "200":
          description: Response request
        "401":
          description: You are not logged
  /api/exercises/:
    get:
      tags:
      - rest-exercise-controller
      summary: 'Get exercise list '
      operationId: getExercises
      parameters:
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Found list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
        "400":
          description: Invalid request
    put:
      tags:
      - rest-exercise-controller
      summary: Edit exercise by its id
      operationId: updateExercise
      parameters:
      - name: id
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Exercise'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "403":
          description: You are not logged
        "200":
          description: Exercise has been edited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
        "404":
          description: That exercise doesn't exist
    post:
      tags:
      - rest-exercise-controller
      summary: Create new exercise by logged admin
      operationId: createExercise
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Exercise'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "403":
          description: You are not logged
        "201":
          description: New exercise created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
    delete:
      tags:
      - rest-exercise-controller
      summary: Delete exercise by its id
      operationId: deleteExercise
      parameters:
      - name: id
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "403":
          description: You are not logged
        "404":
          description: That exercise doesn't exist
        "200":
          description: Exercise has been deleted
  /sendRequest:
    post:
      tags:
      - web-controller
      operationId: sendRequest
      parameters:
      - name: id
        in: query
        required: true
        schema:
          type: string
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /sendComment:
    post:
      tags:
      - rutine-controller
      operationId: postMethodName
      parameters:
      - name: comentario
        in: query
        required: true
        schema:
          type: string
      - name: id
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Comment'
  /processRequest:
    post:
      tags:
      - web-controller
      operationId: processRequest_1
      parameters:
      - name: notification
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Notification'
      - name: aceptar
        in: query
        required: true
        schema:
          type: boolean
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: OK
  /deleteUser:
    post:
      tags:
      - admin-controller
      operationId: deleteUser
      parameters:
      - name: id
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /deleteComment:
    post:
      tags:
      - rutine-controller
      operationId: deleteRutineComment
      parameters:
      - name: commentId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: rutineId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: OK
  /api/rutines/{rutineId}/comments:
    post:
      tags:
      - rest-rutine-controller
      summary: Post new comment by rutine id
      operationId: postComment
      parameters:
      - name: rutineId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonNode'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Rutine not found
        "200":
          description: Comment has been posted
        "401":
          description: You are not logged
  /api/rutines/:
    get:
      tags:
      - rest-rutine-controller
      summary: Get rutine list by logged user
      operationId: getRutines
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Your rutine list is empty
        "200":
          description: Found list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RutineDTO'
        "400":
          description: Invalid request
    post:
      tags:
      - rest-rutine-controller
      summary: Create new rutine by logged user
      operationId: createRutine
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rutine'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "201":
          description: New rutine created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RutineDTO'
        "401":
          description: You are not logged
  /api/persons/image:
    get:
      tags:
      - rest-person-controller
      summary: 'Get image by logged user '
      operationId: getImage
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Found image
          content:
            image/jpeg: {}
        "404":
          description: Image dosen´t exit
    post:
      tags:
      - rest-person-controller
      summary: Create new image by logged user
      operationId: setUserImage
      requestBody:
        content:
          application/json:
            schema:
              required:
              - image
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "201":
          description: New image created
          content:
            image/jpeg: {}
        "401":
          description: You are not logged
  /api/persons/friends/requests:
    post:
      tags:
      - rest-person-controller
      summary: Send request
      operationId: sendFriendRequest
      parameters:
      - name: friendId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: The person dosen´t exit
        "201":
          description: New request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        "401":
          description: You are not logged
  /api/persons/:
    get:
      tags:
      - rest-person-controller
      summary: Get person by logged user
      operationId: getPerson
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Found person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDTO'
        "401":
          description: You are not logged
    post:
      tags:
      - rest-person-controller
      summary: Create new person
      operationId: createPerson
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "201":
          description: New person created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
    patch:
      tags:
      - rest-person-controller
      summary: Edit person by user request
      operationId: editPerson
      parameters:
      - name: alias
        in: query
        required: false
        schema:
          type: string
      - name: name
        in: query
        required: false
        schema:
          type: string
      - name: date
        in: query
        required: false
        schema:
          type: string
      - name: weight
        in: query
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Person has been edited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDTO'
        "401":
          description: You are not logged
  /api/exercises/image/:
    get:
      tags:
      - rest-exercise-controller
      summary: 'Get image by exercise id '
      operationId: getImage_1
      parameters:
      - name: id
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Found image
          content:
            image/jpeg: {}
        "404":
          description: Exercise image is empty or exercise doesn't exit
    post:
      tags:
      - rest-exercise-controller
      summary: Create new image by logged admin
      operationId: createImage
      parameters:
      - name: id
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              required:
              - image
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "403":
          description: You are not logged
        "201":
          description: New image created
          content:
            image/jpeg: {}
        "404":
          description: That exercise doesn't exist
    delete:
      tags:
      - rest-exercise-controller
      summary: Delete image by exercise id
      operationId: deleteImage
      parameters:
      - name: id
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "403":
          description: You are not logged
        "404":
          description: That exercise doesn't exist
        "200":
          description: Exercise has been deleted
  /api/auth/refresh:
    post:
      tags:
      - rest-login-controller
      summary: 'Refresh login '
      operationId: refreshToken
      parameters:
      - name: refreshToken
        in: cookie
        required: false
        schema:
          type: string
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Correct refresh
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        "401":
          description: You are not logged
  /api/auth/logout:
    post:
      tags:
      - rest-login-controller
      summary: 'Logout '
      operationId: logOut
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Correct logout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        "401":
          description: You are not logged
  /api/auth/login:
    post:
      tags:
      - rest-login-controller
      summary: 'Login '
      operationId: login
      parameters:
      - name: accessToken
        in: cookie
        required: false
        schema:
          type: string
      - name: refreshToken
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "500":
          description: Error
          content: {}
        "200":
          description: Correct login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/rutines/{id}:
    get:
      tags:
      - rest-rutine-controller
      summary: Get one of your rutines by rutine id
      operationId: getSingleRutine
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "500":
          description: Bad request
          content: {}
        "200":
          description: Rutine found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RutineDTO'
        "403":
          description: You don't have that rutine
    delete:
      tags:
      - rest-rutine-controller
      summary: Delete rutine by its id
      operationId: deleteRutine
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "500":
          description: You are not logged
          content: {}
        "200":
          description: Rutine has been deleted
        "401":
          description: You are not the owner of that rutine
        "404":
          description: That rutine doesn't exist
    patch:
      tags:
      - rest-rutine-controller
      summary: Edit rutine by its id
      operationId: editRutine
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rutine'
        required: true
      responses:
        "500":
          description: You are not logged
          content: {}
        "200":
          description: Rutine has been edited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RutineDTO'
        "401":
          description: You are not the owner of that rutine
        "404":
          description: That rutine doesn't exist
  /starterNews:
    get:
      tags:
      - web-controller
      operationId: getNews
      parameters:
      - name: iteracion
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: object
  /searchUsers:
    get:
      tags:
      - web-controller
      operationId: searchbyName
      parameters:
      - name: nombre
        in: query
        required: true
        schema:
          type: string
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
  /searchEx:
    get:
      tags:
      - exercise-controller
      operationId: searchNames
      parameters:
      - name: nombre
        in: query
        required: true
        schema:
          type: string
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: array
                  items:
                    type: string
  /notifications:
    get:
      tags:
      - web-controller
      operationId: getNotifications
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
  /loadRutines:
    get:
      tags:
      - web-controller
      operationId: getOwnRutines
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rutine'
  /loadFriends:
    get:
      tags:
      - web-controller
      operationId: loadFriends
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
  /loadCharts:
    get:
      tags:
      - web-controller
      operationId: loadCharts
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
  /api/rutines/friends/{id}:
    get:
      tags:
      - rest-rutine-controller
      summary: Get friend rutine by rutine id
      operationId: getFriendRutine
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "500":
          description: Bad request
          content: {}
        "403":
          description: Your friends don't have that rutine
        "200":
          description: Friend rutine found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RutineDTO'
  /api/rutines/download/{id}:
    get:
      tags:
      - rest-rutine-controller
      summary: Download one of your rutines or one of your fiends' rutine by rutine
        id
      operationId: downloadPDF
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "500":
          description: Bad request
          content: {}
        "403":
          description: You or your friends don't have that rutine
        "200":
          description: PDF created
  /api/persons/requests:
    get:
      tags:
      - rest-person-controller
      summary: Get request list by logged user
      operationId: getRequests
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Found list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        "401":
          description: You are not logged
  /api/persons/news:
    get:
      tags:
      - rest-person-controller
      summary: Get news list by logged user
      operationId: getNews_1
      parameters:
      - name: iteracion
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Found list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        "401":
          description: You are not logged
  /api/persons/news/{id}:
    get:
      tags:
      - rest-person-controller
      summary: 'Get new by id '
      operationId: showNotification
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Found list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        "404":
          description: The new dosen´t exit
        "401":
          description: You are not logged
  /api/persons/charts:
    get:
      tags:
      - rest-person-controller
      summary: 'Get chart by logged user '
      operationId: loadChart
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Found chart
          content:
            application/json:
              schema:
                type: string
        "401":
          description: You are not logged
  /api/exercises/{id}:
    get:
      tags:
      - rest-exercise-controller
      summary: Get an exercise by its id
      operationId: getExercise
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Exercise not found
        "200":
          description: Found the exercise
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
        "400":
          description: Invalid request
  /api/exercises/group/:
    get:
      tags:
      - rest-exercise-controller
      summary: 'Get exercise list by group '
      operationId: getExercisesByGroup
      parameters:
      - name: group
        in: query
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Found list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
        "400":
          description: Invalid request
  /api/rutines/{rutineId}/comments/{commentId}:
    delete:
      tags:
      - rest-rutine-controller
      summary: Delete comment by rutine id
      operationId: deleteComment
      parameters:
      - name: rutineId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: commentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Rutine not found
        "200":
          description: Comment has been deleted
        "403":
          description: You are not the owner of that comment
  /api/persons/{id}:
    delete:
      tags:
      - rest-person-controller
      summary: Delete person by its id
      operationId: deletePerson
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "403":
          description: You are not admin
        "200":
          description: Person has been deleted
        "404":
          description: That person doesn't exist
        "401":
          description: You are not logged
  /api/persons/friends/{friendId}:
    delete:
      tags:
      - rest-person-controller
      summary: Delete friend by friend id
      operationId: deleteFriend
      parameters:
      - name: friendId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: The person dosen´t exit
        "200":
          description: Delete friend
        "401":
          description: You are not logged
components:
  schemas:
    Exercise:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        grp:
          type: string
        video:
          type: string
        description:
          type: string
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        alias:
          type: string
        content:
          type: string
        own:
          type: boolean
    Notification:
      type: object
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string
    JsonNode:
      type: object
    ExRutine:
      type: object
      properties:
        id:
          type: integer
          format: int64
        grp:
          type: string
        exercise:
          type: string
        series:
          type: string
        weight:
          type: integer
          format: int32
    Rutine:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        date:
          type: string
          format: date-time
        time:
          type: integer
          format: int32
        exercises:
          type: array
          items:
            $ref: '#/components/schemas/ExRutine'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    RutineDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        date:
          type: string
          format: date-time
        time:
          type: integer
          format: int32
        getlComments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        exercises:
          type: array
          items:
            $ref: '#/components/schemas/ExRutine'
        person:
          type: string
    News:
      type: object
      properties:
        id:
          type: integer
          format: int64
        alias:
          type: string
        rutine:
          $ref: '#/components/schemas/Rutine'
    Person:
      type: object
      properties:
        id:
          type: integer
          format: int64
        alias:
          type: string
        name:
          type: string
        encodedPassword:
          type: string
        date:
          type: string
        weight:
          type: integer
          format: int32
        friends:
          type: array
          items:
            $ref: '#/components/schemas/Person'
        roles:
          type: array
          items:
            type: string
        getlNotifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
        rutines:
          type: array
          items:
            $ref: '#/components/schemas/Rutine'
        news:
          type: array
          items:
            $ref: '#/components/schemas/News'
        image:
          $ref: '#/components/schemas/Picture'
        chestFrec:
          type: object
          additionalProperties:
            type: integer
            format: int32
        shoulderFrec:
          type: object
          additionalProperties:
            type: integer
            format: int32
        backFrec:
          type: object
          additionalProperties:
            type: integer
            format: int32
        bicepsFrec:
          type: object
          additionalProperties:
            type: integer
            format: int32
        tricepsFrec:
          type: object
          additionalProperties:
            type: integer
            format: int32
        lowerFrec:
          type: object
          additionalProperties:
            type: integer
            format: int32
        cardioFrec:
          type: object
          additionalProperties:
            type: integer
            format: int32
        lnotifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
    Picture:
      type: object
      properties:
        name:
          type: string
        content:
          type: string
        data:
          type: array
          items:
            type: string
            format: byte
    AuthResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
        message:
          type: string
        error:
          type: string
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    PersonDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        alias:
          type: string
        name:
          type: string
        date:
          type: string
        weight:
          type: integer
          format: int32
        friends:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            type: string
        getlNotifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
        rutines:
          type: array
          items:
            $ref: '#/components/schemas/Rutine'
        news:
          type: array
          items:
            $ref: '#/components/schemas/News'
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
